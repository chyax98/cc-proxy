[
  {
    "name": "Task",
    "description": "Launch a new agent to handle complex, multi-step tasks autonomously. \n\nAvailable agent types and the tools they have access to:\n- general-purpose: General-purpose agent for researching complex questions, searching for code, and executing multi-step tasks. When you are searching for a keyword or file and are not confident that you will find the right match in the first few tries use this agent to perform the search for you. (Tools: *)\n- statusline-setup: Use this agent to configure the user's Claude Code status line setting. (Tools: Read, Edit)\n- output-style-setup: Use this agent to create a Claude Code output style. (Tools: Read, Write, Edit, Glob, Grep)\n- Explore: Fast agent specialized for exploring codebases. Use this when you need to quickly find files by patterns (eg. \"src/components/**/*.tsx\"), search code for keywords (eg. \"API endpoints\"), or answer questions about the codebase (eg. \"how do API endpoints work?\"). When calling this agent, specify the desired thoroughness level: \"quick\" for basic searches, \"medium\" for moderate exploration, or \"very thorough\" for comprehensive analysis across multiple locations and naming conventions. (Tools: Glob, Grep, Read, Bash)\n- python-expert: Deliver production-ready, secure, high-performance Python code following SOLID principles and modern best practices (Tools: *)\n- system-architect: Design scalable system architecture with focus on maintainability and long-term technical decisions (Tools: *)\n- refactoring-expert: Improve code quality and reduce technical debt through systematic refactoring and clean code principles (Tools: *)\n- devops-architect: Automate infrastructure and deployment processes with focus on reliability and observability (Tools: *)\n- security-engineer: Identify security vulnerabilities and ensure compliance with security standards and best practices (Tools: *)\n- frontend-architect: Create accessible, performant user interfaces with focus on user experience and modern frameworks (Tools: *)\n- quality-engineer: Ensure software quality through comprehensive testing strategies and systematic edge case detection (Tools: *)\n- performance-engineer: Optimize system performance through measurement-driven analysis and bottleneck elimination (Tools: *)\n- requirements-analyst: Transform ambiguous project ideas into concrete specifications through systematic requirements discovery and structured analysis (Tools: *)\n- backend-architect: Design reliable backend systems with focus on data integrity, security, and fault tolerance (Tools: *)\n- get-current-datetime: 执行日期命令并仅返回原始输出。不添加格式、标题、说明或并行代理。 (Tools: Bash, Read, Write)\n- init-architect: 自适应初始化：根级简明 + 模块级详尽；分阶段遍历并回报覆盖率 (Tools: Read, Write, Glob, Grep)\n- knowledge-architect: 专门构建和优化技术知识体系的智能代理，为学习驱动型开发人员设计系统性的知识架构和学习路径。 (Tools: *)\n- ui-ux-designer: Use this agent when you need UI/UX design guidance, Current Project UI Framework implementation advice, or visual design improvements for the desktop application interface. Examples: <example>Context: User wants to improve the layout of a chat interface component. user: \"我想改进聊天界面的布局，让它更符合 当前项目UI框架 规范\" assistant: \"I'll use the ui-ux-designer agent to provide 当前项目UI框架 compliant layout recommendations for the chat interface\" <commentary>Since the user is asking for UI/UX design improvements following 当前项目UI框架 standards, use the ui-ux-designer agent to provide specific design guidance.</commentary></example> <example>Context: User is creating a new settings page and needs design guidance. user: \"需要为设置页面设计一个更好的用户体验\" assistant: \"Let me use the ui-ux-designer agent to create a comprehensive UX design for the settings page\" <commentary>The user needs UX design guidance for a settings page, so use the ui-ux-designer agent to provide detailed design recommendations.</commentary></example> (Tools: *)\n- planner: Use this agent when the user presents a complex task or project that needs to be broken down into manageable steps and documented for review. Examples: <example>Context: User wants to implement a new feature for their Tauri application. user: '我需要为我们的微信助手应用添加一个群聊管理功能，包括自动回复、成员管理和消息统计' assistant: '我将使用任务拆解规划代理来分析这个复杂功能并生成详细的实施计划' <commentary>Since the user is presenting a complex feature request that needs systematic planning, use the task-breakdown-planner agent to create a structured implementation plan.</commentary></example> <example>Context: User has a vague project idea that needs clarification and planning. user: '我想要优化我们的应用性能，但不知道从哪里开始' assistant: '让我使用任务拆解规划代理来帮你制定一个系统的性能优化计划' <commentary>The user has a broad goal that needs to be broken down into specific, actionable steps, so use the task-breakdown-planner agent.</commentary></example> (Tools: *)\n\nWhen using the Task tool, you must specify a subagent_type parameter to select which agent type to use.\n\nWhen NOT to use the Agent tool:\n- If you want to read a specific file path, use the Read or Glob tool instead of the Agent tool, to find the match more quickly\n- If you are searching for a specific class definition like \"class Foo\", use the Glob tool instead, to find the match more quickly\n- If you are searching for code within a specific file or set of 2-3 files, use the Read tool instead of the Agent tool, to find the match more quickly\n- Other tasks that are not related to the agent descriptions above\n\n\nUsage notes:\n- Launch multiple agents concurrently whenever possible, to maximize performance; to do that, use a single message with multiple tool uses\n- When the agent is done, it will return a single message back to you. The result returned by the agent is not visible to the user. To show the user the result, you should send a text message back to the user with a concise summary of the result.\n- For agents that run in the background, you will need to use AgentOutputTool to retrieve their results once they are done. You can continue to work while async agents run in the background - when you need their results to continue you can use AgentOutputTool in blocking mode to pause and wait for their results.\n- Each agent invocation is stateless. You will not be able to send additional messages to the agent, nor will the agent be able to communicate with you outside of its final report. Therefore, your prompt should contain a highly detailed task description for the agent to perform autonomously and you should specify exactly what information the agent should return back to you in its final and only message to you.\n- The agent's outputs should generally be trusted\n- Clearly tell the agent whether you expect it to write code or just to do research (search, file reads, web fetches, etc.), since it is not aware of the user's intent\n- If the agent description mentions that it should be used proactively, then you should try your best to use it without the user having to ask for it first. Use your judgement.\n- If the user specifies that they want you to run agents \"in parallel\", you MUST send a single message with multiple Task tool use content blocks. For example, if you need to launch both a code-reviewer agent and a test-runner agent in parallel, send a single message with both tool calls.\n\nExample usage:\n\n<example_agent_descriptions>\n\"code-reviewer\": use this agent after you are done writing a signficant piece of code\n\"greeting-responder\": use this agent when to respond to user greetings with a friendly joke\n</example_agent_description>\n\n<example>\nuser: \"Please write a function that checks if a number is prime\"\nassistant: Sure let me write a function that checks if a number is prime\nassistant: First let me use the Write tool to write a function that checks if a number is prime\nassistant: I'm going to use the Write tool to write the following code:\n<code>\nfunction isPrime(n) {\n  if (n <= 1) return false\n  for (let i = 2; i * i <= n; i++) {\n    if (n % i === 0) return false\n  }\n  return true\n}\n</code>\n<commentary>\nSince a signficant piece of code was written and the task was completed, now use the code-reviewer agent to review the code\n</commentary>\nassistant: Now let me use the code-reviewer agent to review the code\nassistant: Uses the Task tool to launch the with the code-reviewer agent \n</example>\n\n<example>\nuser: \"Hello\"\n<commentary>\nSince the user is greeting, use the greeting-responder agent to respond with a friendly joke\n</commentary>\nassistant: \"I'm going to use the Task tool to launch the with the greeting-responder agent\"\n</example>\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "description": "A short (3-5 word) description of the task"
        },
        "prompt": {
          "type": "string",
          "description": "The task for the agent to perform"
        },
        "subagent_type": {
          "type": "string",
          "description": "The type of specialized agent to use for this task"
        }
      },
      "required": [
        "description",
        "prompt",
        "subagent_type"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Bash",
    "description": "Executes a given bash command in a persistent shell session with optional timeout, ensuring proper handling and security measures.\n\nIMPORTANT: This tool is for terminal operations like git, npm, docker, etc. DO NOT use it for file operations (reading, writing, editing, searching, finding files) - use the specialized tools for this instead.\n\nBefore executing the command, please follow these steps:\n\n1. Directory Verification:\n   - If the command will create new directories or files, first use `ls` to verify the parent directory exists and is the correct location\n   - For example, before running \"mkdir foo/bar\", first use `ls foo` to check that \"foo\" exists and is the intended parent directory\n\n2. Command Execution:\n   - Always quote file paths that contain spaces with double quotes (e.g., cd \"path with spaces/file.txt\")\n   - Examples of proper quoting:\n     - cd \"/Users/name/My Documents\" (correct)\n     - cd /Users/name/My Documents (incorrect - will fail)\n     - python \"/path/with spaces/script.py\" (correct)\n     - python /path/with spaces/script.py (incorrect - will fail)\n   - After ensuring proper quoting, execute the command.\n   - Capture the output of the command.\n\nUsage notes:\n  - The command argument is required.\n  - You can specify an optional timeout in milliseconds (up to 600000ms / 10 minutes). If not specified, commands will timeout after 120000ms (2 minutes).\n  - It is very helpful if you write a clear, concise description of what this command does in 5-10 words.\n  - If the output exceeds 30000 characters, output will be truncated before being returned to you.\n  - You can use the `run_in_background` parameter to run the command in the background, which allows you to continue working while the command runs. You can monitor the output using the Bash tool as it becomes available. Never use `run_in_background` to run 'sleep' as it will return immediately. You do not need to use '&' at the end of the command when using this parameter.\n  \n  - Avoid using Bash with the `find`, `grep`, `cat`, `head`, `tail`, `sed`, `awk`, or `echo` commands, unless explicitly instructed or when these commands are truly necessary for the task. Instead, always prefer using the dedicated tools for these commands:\n    - File search: Use Glob (NOT find or ls)\n    - Content search: Use Grep (NOT grep or rg)\n    - Read files: Use Read (NOT cat/head/tail)\n    - Edit files: Use Edit (NOT sed/awk)\n    - Write files: Use Write (NOT echo >/cat <<EOF)\n    - Communication: Output text directly (NOT echo/printf)\n  - When issuing multiple commands:\n    - If the commands are independent and can run in parallel, make multiple Bash tool calls in a single message. For example, if you need to run \"git status\" and \"git diff\", send a single message with two Bash tool calls in parallel.\n    - If the commands depend on each other and must run sequentially, use a single Bash call with '&&' to chain them together (e.g., `git add . && git commit -m \"message\" && git push`). For instance, if one operation must complete before another starts (like mkdir before cp, Write before Bash for git operations, or git add before git commit), run these operations sequentially instead.\n    - Use ';' only when you need to run commands sequentially but don't care if earlier commands fail\n    - DO NOT use newlines to separate commands (newlines are ok in quoted strings)\n  - Try to maintain your current working directory throughout the session by using absolute paths and avoiding usage of `cd`. You may use `cd` if the User explicitly requests it.\n    <good-example>\n    pytest /foo/bar/tests\n    </good-example>\n    <bad-example>\n    cd /foo/bar && pytest tests\n    </bad-example>\n\n# Committing changes with git\n\nOnly create commits when requested by the user. If unclear, ask first. When the user asks you to create a new git commit, follow these steps carefully:\n\nGit Safety Protocol:\n- NEVER update the git config\n- NEVER run destructive/irreversible git commands (like push --force, hard reset, etc) unless the user explicitly requests them \n- NEVER skip hooks (--no-verify, --no-gpg-sign, etc) unless the user explicitly requests it\n- NEVER run force push to main/master, warn the user if they request it\n- Avoid git commit --amend.  ONLY use --amend when either (1) user explicitly requested amend OR (2) adding edits from pre-commit hook (additional instructions below) \n- Before amending: ALWAYS check authorship (git log -1 --format='%an %ae')\n- NEVER commit changes unless the user explicitly asks you to. It is VERY IMPORTANT to only commit when explicitly asked, otherwise the user will feel that you are being too proactive.\n\n1. You can call multiple tools in a single response. When multiple independent pieces of information are requested and all commands are likely to succeed, run multiple tool calls in parallel for optimal performance. run the following bash commands in parallel, each using the Bash tool:\n  - Run a git status command to see all untracked files.\n  - Run a git diff command to see both staged and unstaged changes that will be committed.\n  - Run a git log command to see recent commit messages, so that you can follow this repository's commit message style.\n2. Analyze all staged changes (both previously staged and newly added) and draft a commit message:\n  - Summarize the nature of the changes (eg. new feature, enhancement to an existing feature, bug fix, refactoring, test, docs, etc.). Ensure the message accurately reflects the changes and their purpose (i.e. \"add\" means a wholly new feature, \"update\" means an enhancement to an existing feature, \"fix\" means a bug fix, etc.).\n  - Do not commit files that likely contain secrets (.env, credentials.json, etc). Warn the user if they specifically request to commit those files\n  - Draft a concise (1-2 sentences) commit message that focuses on the \"why\" rather than the \"what\"\n  - Ensure it accurately reflects the changes and their purpose\n3. You can call multiple tools in a single response. When multiple independent pieces of information are requested and all commands are likely to succeed, run multiple tool calls in parallel for optimal performance. run the following commands:\n   - Add relevant untracked files to the staging area.\n   - Create the commit with a message ending with:\n   🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   - Run git status after the commit completes to verify success.\n   Note: git status depends on the commit completing, so run it sequentially after the commit.\n4. If the commit fails due to pre-commit hook changes, retry ONCE. If it succeeds but files were modified by the hook, verify it's safe to amend:\n   - Check authorship: git log -1 --format='%an %ae'\n   - Check not pushed: git status shows \"Your branch is ahead\"\n   - If both true: amend your commit. Otherwise: create NEW commit (never amend other developers' commits)\n\nImportant notes:\n- NEVER run additional commands to read or explore code, besides git bash commands\n- NEVER use the TodoWrite or Task tools\n- DO NOT push to the remote repository unless the user explicitly asks you to do so\n- IMPORTANT: Never use git commands with the -i flag (like git rebase -i or git add -i) since they require interactive input which is not supported.\n- If there are no changes to commit (i.e., no untracked files and no modifications), do not create an empty commit\n- In order to ensure good formatting, ALWAYS pass the commit message via a HEREDOC, a la this example:\n<example>\ngit commit -m \"$(cat <<'EOF'\n   Commit message here.\n\n   🤖 Generated with [Claude Code](https://claude.com/claude-code)\n\n   Co-Authored-By: Claude <noreply@anthropic.com>\n   EOF\n   )\"\n</example>\n\n# Creating pull requests\nUse the gh command via the Bash tool for ALL GitHub-related tasks including working with issues, pull requests, checks, and releases. If given a Github URL use the gh command to get the information needed.\n\nIMPORTANT: When the user asks you to create a pull request, follow these steps carefully:\n\n1. You can call multiple tools in a single response. When multiple independent pieces of information are requested and all commands are likely to succeed, run multiple tool calls in parallel for optimal performance. run the following bash commands in parallel using the Bash tool, in order to understand the current state of the branch since it diverged from the main branch:\n   - Run a git status command to see all untracked files\n   - Run a git diff command to see both staged and unstaged changes that will be committed\n   - Check if the current branch tracks a remote branch and is up to date with the remote, so you know if you need to push to the remote\n   - Run a git log command and `git diff [base-branch]...HEAD` to understand the full commit history for the current branch (from the time it diverged from the base branch)\n2. Analyze all changes that will be included in the pull request, making sure to look at all relevant commits (NOT just the latest commit, but ALL commits that will be included in the pull request!!!), and draft a pull request summary\n3. You can call multiple tools in a single response. When multiple independent pieces of information are requested and all commands are likely to succeed, run multiple tool calls in parallel for optimal performance. run the following commands in parallel:\n   - Create new branch if needed\n   - Push to remote with -u flag if needed\n   - Create PR using gh pr create with the format below. Use a HEREDOC to pass the body to ensure correct formatting.\n<example>\ngh pr create --title \"the pr title\" --body \"$(cat <<'EOF'\n## Summary\n<1-3 bullet points>\n\n## Test plan\n[Bulleted markdown checklist of TODOs for testing the pull request...]\n\n🤖 Generated with [Claude Code](https://claude.com/claude-code)\nEOF\n)\"\n</example>\n\nImportant:\n- DO NOT use the TodoWrite or Task tools\n- Return the PR URL when you're done, so the user can see it\n\n# Other common operations\n- View comments on a Github PR: gh api repos/foo/bar/pulls/123/comments",
    "input_schema": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The command to execute"
        },
        "timeout": {
          "type": "number",
          "description": "Optional timeout in milliseconds (max 600000)"
        },
        "description": {
          "type": "string",
          "description": "Clear, concise description of what this command does in 5-10 words, in active voice. Examples:\nInput: ls\nOutput: List files in current directory\n\nInput: git status\nOutput: Show working tree status\n\nInput: npm install\nOutput: Install package dependencies\n\nInput: mkdir foo\nOutput: Create directory 'foo'"
        },
        "run_in_background": {
          "type": "boolean",
          "description": "Set to true to run this command in the background. Use BashOutput to read the output later."
        },
        "dangerouslyOverrideSandbox": {
          "type": "boolean",
          "description": "Set this to true to dangerously override sandbox mode and run commands without sandboxing."
        }
      },
      "required": [
        "command"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Glob",
    "description": "- Fast file pattern matching tool that works with any codebase size\n- Supports glob patterns like \"**/*.js\" or \"src/**/*.ts\"\n- Returns matching file paths sorted by modification time\n- Use this tool when you need to find files by name patterns\n- When you are doing an open ended search that may require multiple rounds of globbing and grepping, use the Agent tool instead\n- You can call multiple tools in a single response. It is always better to speculatively perform multiple searches in parallel if they are potentially useful.",
    "input_schema": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "The glob pattern to match files against"
        },
        "path": {
          "type": "string",
          "description": "The directory to search in. If not specified, the current working directory will be used. IMPORTANT: Omit this field to use the default directory. DO NOT enter \"undefined\" or \"null\" - simply omit it for the default behavior. Must be a valid directory path if provided."
        }
      },
      "required": [
        "pattern"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Grep",
    "description": "A powerful search tool built on ripgrep\n\n  Usage:\n  - ALWAYS use Grep for search tasks. NEVER invoke `grep` or `rg` as a Bash command. The Grep tool has been optimized for correct permissions and access.\n  - Supports full regex syntax (e.g., \"log.*Error\", \"function\\s+\\w+\")\n  - Filter files with glob parameter (e.g., \"*.js\", \"**/*.tsx\") or type parameter (e.g., \"js\", \"py\", \"rust\")\n  - Output modes: \"content\" shows matching lines, \"files_with_matches\" shows only file paths (default), \"count\" shows match counts\n  - Use Task tool for open-ended searches requiring multiple rounds\n  - Pattern syntax: Uses ripgrep (not grep) - literal braces need escaping (use `interface\\{\\}` to find `interface{}` in Go code)\n  - Multiline matching: By default patterns match within single lines only. For cross-line patterns like `struct \\{[\\s\\S]*?field`, use `multiline: true`\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "pattern": {
          "type": "string",
          "description": "The regular expression pattern to search for in file contents"
        },
        "path": {
          "type": "string",
          "description": "File or directory to search in (rg PATH). Defaults to current working directory."
        },
        "glob": {
          "type": "string",
          "description": "Glob pattern to filter files (e.g. \"*.js\", \"*.{ts,tsx}\") - maps to rg --glob"
        },
        "output_mode": {
          "type": "string",
          "enum": [
            "content",
            "files_with_matches",
            "count"
          ],
          "description": "Output mode: \"content\" shows matching lines (supports -A/-B/-C context, -n line numbers, head_limit), \"files_with_matches\" shows file paths (supports head_limit), \"count\" shows match counts (supports head_limit). Defaults to \"files_with_matches\"."
        },
        "-B": {
          "type": "number",
          "description": "Number of lines to show before each match (rg -B). Requires output_mode: \"content\", ignored otherwise."
        },
        "-A": {
          "type": "number",
          "description": "Number of lines to show after each match (rg -A). Requires output_mode: \"content\", ignored otherwise."
        },
        "-C": {
          "type": "number",
          "description": "Number of lines to show before and after each match (rg -C). Requires output_mode: \"content\", ignored otherwise."
        },
        "-n": {
          "type": "boolean",
          "description": "Show line numbers in output (rg -n). Requires output_mode: \"content\", ignored otherwise."
        },
        "-i": {
          "type": "boolean",
          "description": "Case insensitive search (rg -i)"
        },
        "type": {
          "type": "string",
          "description": "File type to search (rg --type). Common types: js, py, rust, go, java, etc. More efficient than include for standard file types."
        },
        "head_limit": {
          "type": "number",
          "description": "Limit output to first N lines/entries, equivalent to \"| head -N\". Works across all output modes: content (limits output lines), files_with_matches (limits file paths), count (limits count entries). When unspecified, shows all results from ripgrep."
        },
        "multiline": {
          "type": "boolean",
          "description": "Enable multiline mode where . matches newlines and patterns can span lines (rg -U --multiline-dotall). Default: false."
        }
      },
      "required": [
        "pattern"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "ExitPlanMode",
    "description": "Use this tool when you are in plan mode and have finished presenting your plan and are ready to code. This will prompt the user to exit plan mode.\nIMPORTANT: Only use this tool when the task requires planning the implementation steps of a task that requires writing code. For research tasks where you're gathering information, searching files, reading files or in general trying to understand the codebase - do NOT use this tool.\n\n## Handling Ambiguity in Plans\nBefore using this tool, ensure your plan is clear and unambiguous. If there are multiple valid approaches or unclear requirements:\n1. Use the AskUserQuestion tool to clarify with the user\n2. Ask about specific implementation choices (e.g., architectural patterns, which library to use)\n3. Clarify any assumptions that could affect the implementation\n4. Only proceed with ExitPlanMode after resolving ambiguities\n\n\n## Examples\n\n1. Initial task: \"Search for and understand the implementation of vim mode in the codebase\" - Do not use the exit plan mode tool because you are not planning the implementation steps of a task.\n2. Initial task: \"Help me implement yank mode for vim\" - Use the exit plan mode tool after you have finished planning the implementation steps of the task.\n3. Initial task: \"Add a new feature to handle user authentication\" - If unsure about auth method (OAuth, JWT, etc.), use AskUserQuestion first, then use exit plan mode tool after clarifying the approach.\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "plan": {
          "type": "string",
          "description": "The plan you came up with, that you want to run by the user for approval. Supports markdown. The plan should be pretty concise."
        }
      },
      "required": [
        "plan"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Read",
    "description": "Reads a file from the local filesystem. You can access any file directly by using this tool.\nAssume this tool is able to read all files on the machine. If the User provides a path to a file assume that path is valid. It is okay to read a file that does not exist; an error will be returned.\n\nUsage:\n- The file_path parameter must be an absolute path, not a relative path\n- By default, it reads up to 2000 lines starting from the beginning of the file\n- You can optionally specify a line offset and limit (especially handy for long files), but it's recommended to read the whole file by not providing these parameters\n- Any lines longer than 2000 characters will be truncated\n- Results are returned using cat -n format, with line numbers starting at 1\n- This tool allows Claude Code to read images (eg PNG, JPG, etc). When reading an image file the contents are presented visually as Claude Code is a multimodal LLM.\n- This tool can read PDF files (.pdf). PDFs are processed page by page, extracting both text and visual content for analysis.\n- This tool can read Jupyter notebooks (.ipynb files) and returns all cells with their outputs, combining code, text, and visualizations.\n- This tool can only read files, not directories. To read a directory, use an ls command via the Bash tool.\n- You can call multiple tools in a single response. It is always better to speculatively read multiple potentially useful files in parallel.\n- You will regularly be asked to read screenshots. If the user provides a path to a screenshot, ALWAYS use this tool to view the file at the path. This tool will work with all temporary file paths.\n- If you read a file that exists but has empty contents you will receive a system reminder warning in place of file contents.",
    "input_schema": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to the file to read"
        },
        "offset": {
          "type": "number",
          "description": "The line number to start reading from. Only provide if the file is too large to read at once"
        },
        "limit": {
          "type": "number",
          "description": "The number of lines to read. Only provide if the file is too large to read at once."
        }
      },
      "required": [
        "file_path"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Edit",
    "description": "Performs exact string replacements in files. \n\nUsage:\n- You must use your `Read` tool at least once in the conversation before editing. This tool will error if you attempt an edit without reading the file. \n- When editing text from Read tool output, ensure you preserve the exact indentation (tabs/spaces) as it appears AFTER the line number prefix. The line number prefix format is: spaces + line number + tab. Everything after that tab is the actual file content to match. Never include any part of the line number prefix in the old_string or new_string.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- Only use emojis if the user explicitly requests it. Avoid adding emojis to files unless asked.\n- The edit will FAIL if `old_string` is not unique in the file. Either provide a larger string with more surrounding context to make it unique or use `replace_all` to change every instance of `old_string`. \n- Use `replace_all` for replacing and renaming strings across the file. This parameter is useful if you want to rename a variable for instance.",
    "input_schema": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to the file to modify"
        },
        "old_string": {
          "type": "string",
          "description": "The text to replace"
        },
        "new_string": {
          "type": "string",
          "description": "The text to replace it with (must be different from old_string)"
        },
        "replace_all": {
          "type": "boolean",
          "default": false,
          "description": "Replace all occurences of old_string (default false)"
        }
      },
      "required": [
        "file_path",
        "old_string",
        "new_string"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Write",
    "description": "Writes a file to the local filesystem.\n\nUsage:\n- This tool will overwrite the existing file if there is one at the provided path.\n- If this is an existing file, you MUST use the Read tool first to read the file's contents. This tool will fail if you did not read the file first.\n- ALWAYS prefer editing existing files in the codebase. NEVER write new files unless explicitly required.\n- NEVER proactively create documentation files (*.md) or README files. Only create documentation files if explicitly requested by the User.\n- Only use emojis if the user explicitly requests it. Avoid writing emojis to files unless asked.",
    "input_schema": {
      "type": "object",
      "properties": {
        "file_path": {
          "type": "string",
          "description": "The absolute path to the file to write (must be absolute, not relative)"
        },
        "content": {
          "type": "string",
          "description": "The content to write to the file"
        }
      },
      "required": [
        "file_path",
        "content"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "NotebookEdit",
    "description": "Completely replaces the contents of a specific cell in a Jupyter notebook (.ipynb file) with new source. Jupyter notebooks are interactive documents that combine code, text, and visualizations, commonly used for data analysis and scientific computing. The notebook_path parameter must be an absolute path, not a relative path. The cell_number is 0-indexed. Use edit_mode=insert to add a new cell at the index specified by cell_number. Use edit_mode=delete to delete the cell at the index specified by cell_number.",
    "input_schema": {
      "type": "object",
      "properties": {
        "notebook_path": {
          "type": "string",
          "description": "The absolute path to the Jupyter notebook file to edit (must be absolute, not relative)"
        },
        "cell_id": {
          "type": "string",
          "description": "The ID of the cell to edit. When inserting a new cell, the new cell will be inserted after the cell with this ID, or at the beginning if not specified."
        },
        "new_source": {
          "type": "string",
          "description": "The new source for the cell"
        },
        "cell_type": {
          "type": "string",
          "enum": [
            "code",
            "markdown"
          ],
          "description": "The type of the cell (code or markdown). If not specified, it defaults to the current cell type. If using edit_mode=insert, this is required."
        },
        "edit_mode": {
          "type": "string",
          "enum": [
            "replace",
            "insert",
            "delete"
          ],
          "description": "The type of edit to make (replace, insert, delete). Defaults to replace."
        }
      },
      "required": [
        "notebook_path",
        "new_source"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "WebFetch",
    "description": "\n- Fetches content from a specified URL and processes it using an AI model\n- Takes a URL and a prompt as input\n- Fetches the URL content, converts HTML to markdown\n- Processes the content with the prompt using a small, fast model\n- Returns the model's response about the content\n- Use this tool when you need to retrieve and analyze web content\n\nUsage notes:\n  - IMPORTANT: If an MCP-provided web fetch tool is available, prefer using that tool instead of this one, as it may have fewer restrictions. All MCP-provided tools start with \"mcp__\".\n  - The URL must be a fully-formed valid URL\n  - HTTP URLs will be automatically upgraded to HTTPS\n  - The prompt should describe what information you want to extract from the page\n  - This tool is read-only and does not modify any files\n  - Results may be summarized if the content is very large\n  - Includes a self-cleaning 15-minute cache for faster responses when repeatedly accessing the same URL\n  - When a URL redirects to a different host, the tool will inform you and provide the redirect URL in a special format. You should then make a new WebFetch request with the redirect URL to fetch the content.\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "format": "uri",
          "description": "The URL to fetch content from"
        },
        "prompt": {
          "type": "string",
          "description": "The prompt to run on the fetched content"
        }
      },
      "required": [
        "url",
        "prompt"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "TodoWrite",
    "description": "Use this tool to create and manage a structured task list for your current coding session. This helps you track progress, organize complex tasks, and demonstrate thoroughness to the user.\nIt also helps the user understand the progress of the task and overall progress of their requests.\n\n## When to Use This Tool\nUse this tool proactively in these scenarios:\n\n1. Complex multi-step tasks - When a task requires 3 or more distinct steps or actions\n2. Non-trivial and complex tasks - Tasks that require careful planning or multiple operations\n3. User explicitly requests todo list - When the user directly asks you to use the todo list\n4. User provides multiple tasks - When users provide a list of things to be done (numbered or comma-separated)\n5. After receiving new instructions - Immediately capture user requirements as todos\n6. When you start working on a task - Mark it as in_progress BEFORE beginning work. Ideally you should only have one todo as in_progress at a time\n7. After completing a task - Mark it as completed and add any new follow-up tasks discovered during implementation\n\n## When NOT to Use This Tool\n\nSkip using this tool when:\n1. There is only a single, straightforward task\n2. The task is trivial and tracking it provides no organizational benefit\n3. The task can be completed in less than 3 trivial steps\n4. The task is purely conversational or informational\n\nNOTE that you should not use this tool if there is only one trivial task to do. In this case you are better off just doing the task directly.\n\n## Examples of When to Use the Todo List\n\n<example>\nUser: I want to add a dark mode toggle to the application settings. Make sure you run the tests and build when you're done!\nAssistant: I'll help add a dark mode toggle to your application settings. Let me create a todo list to track this implementation.\n*Creates todo list with the following items:*\n1. Creating dark mode toggle component in Settings page\n2. Adding dark mode state management (context/store)\n3. Implementing CSS-in-JS styles for dark theme\n4. Updating existing components to support theme switching\n5. Running tests and build process, addressing any failures or errors that occur\n*Begins working on the first task*\n\n<reasoning>\nThe assistant used the todo list because:\n1. Adding dark mode is a multi-step feature requiring UI, state management, and styling changes\n2. The user explicitly requested tests and build be run afterward\n3. The assistant inferred that tests and build need to pass by adding \"Ensure tests and build succeed\" as the final task\n</reasoning>\n</example>\n\n<example>\nUser: Help me rename the function getCwd to getCurrentWorkingDirectory across my project\nAssistant: Let me first search through your codebase to find all occurrences of 'getCwd'.\n*Uses grep or search tools to locate all instances of getCwd in the codebase*\nAssistant: I've found 15 instances of 'getCwd' across 8 different files. Let me create a todo list to track these changes.\n*Creates todo list with specific items for each file that needs updating*\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant searched to understand the scope of the task\n2. Upon finding multiple occurrences across different files, it determined this was a complex task with multiple steps\n3. The todo list helps ensure every instance is tracked and updated systematically\n4. This approach prevents missing any occurrences and maintains code consistency\n</reasoning>\n</example>\n\n\n<example>\nUser: I need to implement these features for my e-commerce site: user registration, product catalog, shopping cart, and checkout flow.\nAssistant: I'll help implement these features. First, let's add all the features to the todo list.\n*Creates a todo list breaking down each feature into specific tasks based on the project architecture*\nAssistant: Let's start with user registration. This will involve creating database models, API endpoints, and frontend forms that integrate with your existing authentication system.\n\n<reasoning>\nThe assistant used the todo list because:\n1. The user provided multiple complex features to implement in a comma separated list\n2. The todo list helps organize these large features into manageable tasks\n3. This approach allows for tracking progress across the entire implementation\n</reasoning>\n</example>\n\n<example>\nUser: Can you help optimize my React application? It's rendering slowly and has performance issues.</user>\nAssistant: I'll help optimize your React application. First, let me examine your codebase to identify potential performance bottlenecks.\n*Reviews component structure, render patterns, state management, and data fetching*\nAssistant: After analyzing your codebase, I've identified several performance issues. Let me create a todo list to track our optimization efforts.\n*Creates todo list with items like: 1) Implementing memoization for expensive calculations in ProductList, 2) Adding virtualization for long lists in Dashboard, 3) Optimizing image loading in Gallery component, 4) Fixing state update loops in ShoppingCart, 5) Reviewing bundle size and implementing code splitting*\nLet's start by implementing memoization for the expensive calculations in your ProductList component.</assistant>\n\n<reasoning>\nThe assistant used the todo list because:\n1. First, the assistant examined the codebase to identify specific performance issues\n2. Based on this analysis, it identified multiple optimization opportunities\n3. Performance optimization is a non-trivial task requiring multiple steps\n4. The todo list helps methodically track improvements across different components\n5. This systematic approach ensures all performance bottlenecks are addressed\n</reasoning>\n</example>\n\n## Examples of When NOT to Use the Todo List\n\n<example>\nUser: How do I print 'Hello World' in Python?\nAssistant: In Python, you can print \"Hello World\" with this simple code:\n\npython\nprint(\"Hello World\")\n\nThis will output the text \"Hello World\" to the console when executed.</assistant>\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, trivial task that can be completed in one step. There's no need to track multiple tasks or steps for such a straightforward request.\n</reasoning>\n</example>\n\n<example>\nUser: What does the git status command do?\nAssistant: The git status command shows the current state of your working directory and staging area. It displays which changes have been staged, which haven't, and which files aren't being tracked by Git. This is a fundamental command for understanding the current state of your repository before making commits.\n\n<reasoning>\nThe assistant did not use the todo list because this is an informational request with no actual coding task to complete. The user is simply asking for an explanation, not for the assistant to perform multiple steps or tasks.\n</reasoning>\n</example>\n\n<example>\nUser: Can you add a comment to the calculateTotal function to explain what it does?\nAssistant: Sure, let me add a comment to the calculateTotal function to explain what it does.\n* Uses the Edit tool to add a comment to the calculateTotal function *\n\n<reasoning>\nThe assistant did not use the todo list because this is a single, straightforward task confined to one location in the code. Adding a comment doesn't require tracking multiple steps or systematic organization.\n</reasoning>\n</example>\n\n<example>\nUser: Run npm install for me and tell me what happens.\nAssistant: I'll run the npm install command for you.\n\n*Executes: npm install*\n\nThe command completed successfully. Here's the output:\n[Output of npm install command]\n\nAll dependencies have been installed according to your package.json file.\n\n<reasoning>\nThe assistant did not use the todo list because this is a single command execution with immediate results. There are no multiple steps to track or organize, making the todo list unnecessary for this straightforward task.\n</reasoning>\n</example>\n\n## Task States and Management\n\n1. **Task States**: Use these states to track progress:\n   - pending: Task not yet started\n   - in_progress: Currently working on (limit to ONE task at a time)\n   - completed: Task finished successfully\n\n   **IMPORTANT**: Task descriptions must have two forms:\n   - content: The imperative form describing what needs to be done (e.g., \"Run tests\", \"Build the project\")\n   - activeForm: The present continuous form shown during execution (e.g., \"Running tests\", \"Building the project\")\n\n2. **Task Management**:\n   - Update task status in real-time as you work\n   - Mark tasks complete IMMEDIATELY after finishing (don't batch completions)\n   - Exactly ONE task must be in_progress at any time (not less, not more)\n   - Complete current tasks before starting new ones\n   - Remove tasks that are no longer relevant from the list entirely\n\n3. **Task Completion Requirements**:\n   - ONLY mark a task as completed when you have FULLY accomplished it\n   - If you encounter errors, blockers, or cannot finish, keep the task as in_progress\n   - When blocked, create a new task describing what needs to be resolved\n   - Never mark a task as completed if:\n     - Tests are failing\n     - Implementation is partial\n     - You encountered unresolved errors\n     - You couldn't find necessary files or dependencies\n\n4. **Task Breakdown**:\n   - Create specific, actionable items\n   - Break complex tasks into smaller, manageable steps\n   - Use clear, descriptive task names\n   - Always provide both forms:\n     - content: \"Fix authentication bug\"\n     - activeForm: \"Fixing authentication bug\"\n\nWhen in doubt, use this tool. Being proactive with task management demonstrates attentiveness and ensures you complete all requirements successfully.\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "todos": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "content": {
                "type": "string",
                "minLength": 1
              },
              "status": {
                "type": "string",
                "enum": [
                  "pending",
                  "in_progress",
                  "completed"
                ]
              },
              "activeForm": {
                "type": "string",
                "minLength": 1
              }
            },
            "required": [
              "content",
              "status",
              "activeForm"
            ],
            "additionalProperties": false
          },
          "description": "The updated todo list"
        }
      },
      "required": [
        "todos"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "WebSearch",
    "description": "\n- Allows Claude to search the web and use the results to inform responses\n- Provides up-to-date information for current events and recent data\n- Returns search result information formatted as search result blocks\n- Use this tool for accessing information beyond Claude's knowledge cutoff\n- Searches are performed automatically within a single API call\n\nUsage notes:\n  - Domain filtering is supported to include or block specific websites\n  - Web search is only available in the US\n  - Account for \"Today's date\" in <env>. For example, if <env> says \"Today's date: 2025-07-01\", and the user wants the latest docs, do not use 2024 in the search query. Use 2025.\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "minLength": 2,
          "description": "The search query to use"
        },
        "allowed_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Only include search results from these domains"
        },
        "blocked_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Never include search results from these domains"
        }
      },
      "required": [
        "query"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "BashOutput",
    "description": "\n- Retrieves output from a running or completed background bash shell\n- Takes a shell_id parameter identifying the shell\n- Always returns only new output since the last check\n- Returns stdout and stderr output along with shell status\n- Supports optional regex filtering to show only lines matching a pattern\n- Use this tool when you need to monitor or check the output of a long-running shell\n- Shell IDs can be found using the /bashes command\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "bash_id": {
          "type": "string",
          "description": "The ID of the background shell to retrieve output from"
        },
        "filter": {
          "type": "string",
          "description": "Optional regular expression to filter the output lines. Only lines matching this regex will be included in the result. Any lines that do not match will no longer be available to read."
        }
      },
      "required": [
        "bash_id"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "KillShell",
    "description": "\n- Kills a running background bash shell by its ID\n- Takes a shell_id parameter identifying the shell to kill\n- Returns a success or failure status \n- Use this tool when you need to terminate a long-running shell\n- Shell IDs can be found using the /bashes command\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "shell_id": {
          "type": "string",
          "description": "The ID of the background shell to kill"
        }
      },
      "required": [
        "shell_id"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "AskUserQuestion",
    "description": "Use this tool when you need to ask the user questions during execution. This allows you to:\n1. Gather user preferences or requirements\n2. Clarify ambiguous instructions\n3. Get decisions on implementation choices as you work\n4. Offer choices to the user about what direction to take.\n\nUsage notes:\n- Users will always be able to select \"Other\" to provide custom text input\n- Use multiSelect: true to allow multiple answers to be selected for a question\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "questions": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "question": {
                "type": "string",
                "description": "The complete question to ask the user. Should be clear, specific, and end with a question mark. Example: \"Which library should we use for date formatting?\" If multiSelect is true, phrase it accordingly, e.g. \"Which features do you want to enable?\""
              },
              "header": {
                "type": "string",
                "description": "Very short label displayed as a chip/tag (max 12 chars). Examples: \"Auth method\", \"Library\", \"Approach\"."
              },
              "options": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "label": {
                      "type": "string",
                      "description": "The display text for this option that the user will see and select. Should be concise (1-5 words) and clearly describe the choice."
                    },
                    "description": {
                      "type": "string",
                      "description": "Explanation of what this option means or what will happen if chosen. Useful for providing context about trade-offs or implications."
                    }
                  },
                  "required": [
                    "label",
                    "description"
                  ],
                  "additionalProperties": false
                },
                "minItems": 2,
                "maxItems": 4,
                "description": "The available choices for this question. Must have 2-4 options. Each option should be a distinct, mutually exclusive choice (unless multiSelect is enabled). There should be no 'Other' option, that will be provided automatically."
              },
              "multiSelect": {
                "type": "boolean",
                "description": "Set to true to allow the user to select multiple options instead of just one. Use when choices are not mutually exclusive."
              }
            },
            "required": [
              "question",
              "header",
              "options",
              "multiSelect"
            ],
            "additionalProperties": false
          },
          "minItems": 1,
          "maxItems": 4,
          "description": "Questions to ask the user (1-4 questions)"
        },
        "answers": {
          "type": "object",
          "additionalProperties": {
            "type": "string"
          },
          "description": "User answers collected by the permission component"
        }
      },
      "required": [
        "questions"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "Skill",
    "description": "Execute a skill within the main conversation\n\n<skills_instructions>\nWhen users ask you to perform tasks, check if any of the available skills below can help complete the task more effectively. Skills provide specialized capabilities and domain knowledge.\n\nHow to use skills:\n- Invoke skills using this tool with the skill name only (no arguments)\n- When you invoke a skill, you will see <command-message>The \"{name}\" skill is loading</command-message>\n- The skill's prompt will expand and provide detailed instructions on how to complete the task\n- Examples:\n  - `command: \"pdf\"` - invoke the pdf skill\n  - `command: \"xlsx\"` - invoke the xlsx skill\n  - `command: \"ms-office-suite:pdf\"` - invoke using fully qualified name\n\nImportant:\n- Only use skills listed in <available_skills> below\n- Do not invoke a skill that is already running\n- Do not use this tool for built-in CLI commands (like /help, /clear, etc.)\n</skills_instructions>\n\n<available_skills>\n<skill>\n<name>\ncode-analyzer\n</name>\n<description>\n测试左移工具 - 提测前代码审查,基于 Git diff 识别缺陷、分析影响范围、验证需求实现,自动确定回归测试范围。触发词:分析提交、代码审查、提测检查、回归范围分析。 (project, gitignored)\n</description>\n<location>\nuser\n</location>\n</skill>\n<skill>\n<name>\nmcp-builder\n</name>\n<description>\nGuide for creating high-quality MCP (Model Context Protocol) servers that enable LLMs to interact with external services through well-designed tools. Use when building MCP servers to integrate external APIs or services, whether in Python (FastMCP) or Node/TypeScript (MCP SDK). (project, gitignored)\n</description>\n<location>\nuser\n</location>\n</skill>\n<skill>\n<name>\nskill-creator\n</name>\n<description>\nGuide for creating effective skills. This skill should be used when users want to create a new skill (or update an existing skill) that extends Claude's capabilities with specialized knowledge, workflows, or tool integrations. (project, gitignored)\n</description>\n<location>\nuser\n</location>\n</skill>\n<skill>\n<name>\nslides-generator\n</name>\n<description>\n通用幻灯片生成器 - 将任意输入智能转换为 Slidev 幻灯片。触发词：生成幻灯片、制作PPT、做个PPT、根据XXX做PPT、把XXX做成幻灯片、XXX的教程、讲解XXX。支持教学、调研、算法、项目解析等场景，自动识别需求类型，生成符合规范的幻灯片并预览。 (project, gitignored)\n</description>\n<location>\nuser\n</location>\n</skill>\n<skill>\n<name>\ntemplate-skill\n</name>\n<description>\nReplace with description of the skill and when Claude should use it. (project, gitignored)\n</description>\n<location>\nuser\n</location>\n</skill>\n</available_skills>\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The skill name (no arguments). E.g., \"pdf\" or \"xlsx\""
        }
      },
      "required": [
        "command"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "SlashCommand",
    "description": "Execute a slash command within the main conversation\n\n**IMPORTANT - Intent Matching:**\nBefore starting any task, CHECK if the user's request matches one of the slash commands listed below. This tool exists to route user intentions to specialized workflows.\n\nHow slash commands work:\nWhen you use this tool or when a user types a slash command, you will see <command-message>{name} is running…</command-message> followed by the expanded prompt. For example, if .claude/commands/foo.md contains \"Print today's date\", then /foo expands to that prompt in the next message.\n\nUsage:\n- `command` (required): The slash command to execute, including any arguments\n- Example: `command: \"/review-pr 123\"`\n\nIMPORTANT: Only use this tool for custom slash commands that appear in the Available Commands list below. Do NOT use for:\n- Built-in CLI commands (like /help, /clear, etc.)\n- Commands not shown in the list\n- Commands you think might exist but aren't listed\n\nAvailable Commands:\n- /ml:research: Research and analyze implementation solutions for a given idea or concept (project, gitignored)\n- /ml:research: Research and analyze implementation solutions for a given idea or concept (project)\n- /sc:implement: Feature and code implementation with intelligent persona activation and MCP integration (project, gitignored)\n- /sc:brainstorm: Interactive requirements discovery through Socratic dialogue and systematic exploration (project, gitignored)\n- /sc:test: Execute tests with coverage analysis and automated quality reporting (project, gitignored)\n- /sc:design: Design system architecture, APIs, and component interfaces with comprehensive specifications (project, gitignored)\n- /sc:task: Execute complex tasks with intelligent workflow management and delegation (project, gitignored)\n- /sc:git: Git operations with intelligent commit messages and workflow optimization (project, gitignored)\n- /sc:help: List all available /sc commands and their functionality (project, gitignored)\n- /sc:workflow: Generate structured implementation workflows from PRDs and feature requirements (project, gitignored)\n- /sc:analyze: Comprehensive code analysis across quality, security, performance, and architecture domains (project, gitignored)\n- /sc:explain: Provide clear explanations of code, concepts, and system behavior with educational clarity (project, gitignored)\n- /sc:improve: Apply systematic improvements to code quality, performance, and maintainability (project, gitignored)\n- /sc:troubleshoot: Diagnose and resolve issues in code, builds, deployments, and system behavior (project, gitignored)\n- /sc:brainstorm: Interactive requirements discovery through Socratic dialogue and systematic exploration (project)\n- /sc:test: Execute tests with coverage analysis and automated quality reporting (project)\n- /sc:design: Design system architecture, APIs, and component interfaces with comprehensive specifications (project)\n- /sc:task: Execute complex tasks with intelligent workflow management and delegation (project)\n- /sc:git: Git operations with intelligent commit messages and workflow optimization (project)\n- /sc:help: List all available /sc commands and their functionality (project)\n- /sc:workflow: Generate structured implementation workflows from PRDs and feature requirements (project)\n- /sc:analyze: Comprehensive code analysis across quality, security, performance, and architecture domains (project)\n- /sc:explain: Provide clear explanations of code, concepts, and system behavior with educational clarity (project)\n- /sc:improve: Apply systematic improvements to code quality, performance, and maintainability (project)\n- /sc:troubleshoot: Diagnose and resolve issues in code, builds, deployments, and system behavior (project)\n- /sc:implement: Feature and code implementation with intelligent persona activation and MCP integration (project)\n- /zcf:git-rollback [--branch <branch>] [--target <rev>] [--mode reset|revert] [--depth <n>] [--dry-run] [--yes]: 交互式回滚 Git 分支到历史版本；列分支、列版本、二次确认后执行 reset / revert (project, gitignored)\n- /zcf:git-cleanBranches [--base <branch>] [--stale <days>] [--remote] [--force] [--dry-run] [--yes]: 安全查找并清理已合并或过期的 Git 分支，支持 dry-run 模式与自定义基准/保护分支 (project, gitignored)\n- /zcf:git-commit [--no-verify] [--all] [--amend] [--signoff] [--emoji] [--scope <scope>] [--type <type>]: 仅用 Git 分析改动并自动生成 conventional commit 信息（可选 emoji）；必要时建议拆分提交，默认运行本地 Git 钩子（可 --no-verify 跳过） (project, gitignored)\n- /zcf:init-project <项目摘要或名称>: 初始化项目 AI 上下文，生成/更新根级与模块级 CLAUDE.md 索引 (project, gitignored)\n- /zcf:feat: 用于新增功能开发的命令，支持完整的开发流程和工具集成 (project, gitignored)\n- /zcf:workflow: 专业AI编程助手，提供结构化六阶段开发工作流（研究→构思→计划→执行→优化→评审），适用于专业开发者 (project, gitignored)\n- /zcf:git-worktree <add|list|remove|prune|migrate> [path] [-b <branch>] [-o|--open] [--track] [--guess-remote] [--detach] [--checkout] [--lock] [--migrate-from <source-path>] [--migrate-stash]: 管理 Git worktree，在项目平级的 ../.zcf/项目名/ 目录下创建，支持智能默认、IDE 集成和内容迁移 (project, gitignored)\n- /zcf:git-worktree <add|list|remove|prune|migrate> [path] [-b <branch>] [-o|--open] [--track] [--guess-remote] [--detach] [--checkout] [--lock] [--migrate-from <source-path>] [--migrate-stash]: 管理 Git worktree，在项目平级的 ../.zcf/项目名/ 目录下创建，支持智能默认、IDE 集成和内容迁移 (project)\n- /zcf:git-rollback [--branch <branch>] [--target <rev>] [--mode reset|revert] [--depth <n>] [--dry-run] [--yes]: 交互式回滚 Git 分支到历史版本；列分支、列版本、二次确认后执行 reset / revert (project)\n- /zcf:git-cleanBranches [--base <branch>] [--stale <days>] [--remote] [--force] [--dry-run] [--yes]: 安全查找并清理已合并或过期的 Git 分支，支持 dry-run 模式与自定义基准/保护分支 (project)\n- /zcf:git-commit [--no-verify] [--all] [--amend] [--signoff] [--emoji] [--scope <scope>] [--type <type>]: 仅用 Git 分析改动并自动生成 conventional commit 信息（可选 emoji）；必要时建议拆分提交，默认运行本地 Git 钩子（可 --no-verify 跳过） (project)\n- /zcf:init-project <项目摘要或名称>: 初始化项目 AI 上下文，生成/更新根级与模块级 CLAUDE.md 索引 (project)\n- /zcf:feat: 用于新增功能开发的命令，支持完整的开发流程和工具集成 (project)\n- /zcf:workflow: 专业AI编程助手，提供结构化六阶段开发工作流（研究→构思→计划→执行→优化→评审），适用于专业开发者 (project)\nNotes:\n- When a user requests multiple slash commands, execute each one sequentially and check for <command-message>{name} is running…</command-message> to verify each has been processed\n- Do not invoke a command that is already running. For example, if you see <command-message>foo is running…</command-message>, do NOT use this tool with \"/foo\" - process the expanded prompt in the following message\n- Only custom slash commands with descriptions are listed in Available Commands. If a user's command is not listed, ask them to check the slash command file and consult the docs.\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "command": {
          "type": "string",
          "description": "The slash command to execute with its arguments, e.g., \"/review-pr 123\""
        }
      },
      "required": [
        "command"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__click",
    "description": "Clicks on the provided element",
    "input_schema": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The uid of an element on the page from the page content snapshot"
        },
        "dblClick": {
          "type": "boolean",
          "description": "Set to true for double clicks. Default is false."
        }
      },
      "required": [
        "uid"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__close_page",
    "description": "Closes the page by its index. The last open page cannot be closed.",
    "input_schema": {
      "type": "object",
      "properties": {
        "pageIdx": {
          "type": "number",
          "description": "The index of the page to close. Call list_pages to list pages."
        }
      },
      "required": [
        "pageIdx"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__drag",
    "description": "Drag an element onto another element",
    "input_schema": {
      "type": "object",
      "properties": {
        "from_uid": {
          "type": "string",
          "description": "The uid of the element to drag"
        },
        "to_uid": {
          "type": "string",
          "description": "The uid of the element to drop into"
        }
      },
      "required": [
        "from_uid",
        "to_uid"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__emulate_cpu",
    "description": "Emulates CPU throttling by slowing down the selected page's execution.",
    "input_schema": {
      "type": "object",
      "properties": {
        "throttlingRate": {
          "type": "number",
          "minimum": 1,
          "maximum": 20,
          "description": "The CPU throttling rate representing the slowdown factor 1-20x. Set the rate to 1 to disable throttling"
        }
      },
      "required": [
        "throttlingRate"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__emulate_network",
    "description": "Emulates network conditions such as throttling or offline mode on the selected page.",
    "input_schema": {
      "type": "object",
      "properties": {
        "throttlingOption": {
          "type": "string",
          "enum": [
            "No emulation",
            "Offline",
            "Slow 3G",
            "Fast 3G",
            "Slow 4G",
            "Fast 4G"
          ],
          "description": "The network throttling option to emulate. Available throttling options are: No emulation, Offline, Slow 3G, Fast 3G, Slow 4G, Fast 4G. Set to \"No emulation\" to disable. Set to \"Offline\" to simulate offline network conditions."
        }
      },
      "required": [
        "throttlingOption"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__evaluate_script",
    "description": "Evaluate a JavaScript function inside the currently selected page. Returns the response as JSON\nso returned values have to JSON-serializable.",
    "input_schema": {
      "type": "object",
      "properties": {
        "function": {
          "type": "string",
          "description": "A JavaScript function declaration to be executed by the tool in the currently selected page.\nExample without arguments: `() => {\n  return document.title\n}` or `async () => {\n  return await fetch(\"example.com\")\n}`.\nExample with arguments: `(el) => {\n  return el.innerText;\n}`\n"
        },
        "args": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "description": "The uid of an element on the page from the page content snapshot"
              }
            },
            "required": [
              "uid"
            ],
            "additionalProperties": false
          },
          "description": "An optional list of arguments to pass to the function."
        }
      },
      "required": [
        "function"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__fill",
    "description": "Type text into a input, text area or select an option from a <select> element.",
    "input_schema": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The uid of an element on the page from the page content snapshot"
        },
        "value": {
          "type": "string",
          "description": "The value to fill in"
        }
      },
      "required": [
        "uid",
        "value"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__fill_form",
    "description": "Fill out multiple form elements at once",
    "input_schema": {
      "type": "object",
      "properties": {
        "elements": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "uid": {
                "type": "string",
                "description": "The uid of the element to fill out"
              },
              "value": {
                "type": "string",
                "description": "Value for the element"
              }
            },
            "required": [
              "uid",
              "value"
            ],
            "additionalProperties": false
          },
          "description": "Elements from snapshot to fill out."
        }
      },
      "required": [
        "elements"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__get_console_message",
    "description": "Gets a console message by its ID. You can get all messages by calling list_console_messages.",
    "input_schema": {
      "type": "object",
      "properties": {
        "msgid": {
          "type": "number",
          "description": "The msgid of a console message on the page from the listed console messages"
        }
      },
      "required": [
        "msgid"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__get_network_request",
    "description": "Gets a network request by URL. You can get all requests by calling list_network_requests.",
    "input_schema": {
      "type": "object",
      "properties": {
        "reqid": {
          "type": "number",
          "description": "The reqid of a request on the page from the listed network requests"
        }
      },
      "required": [
        "reqid"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__handle_dialog",
    "description": "If a browser dialog was opened, use this command to handle it",
    "input_schema": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "accept",
            "dismiss"
          ],
          "description": "Whether to dismiss or accept the dialog"
        },
        "promptText": {
          "type": "string",
          "description": "Optional prompt text to enter into the dialog."
        }
      },
      "required": [
        "action"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__hover",
    "description": "Hover over the provided element",
    "input_schema": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The uid of an element on the page from the page content snapshot"
        }
      },
      "required": [
        "uid"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__list_console_messages",
    "description": "List all console messages for the currently selected page since the last navigation.",
    "input_schema": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "Maximum number of messages to return. When omitted, returns all requests."
        },
        "pageIdx": {
          "type": "integer",
          "minimum": 0,
          "description": "Page number to return (0-based). When omitted, returns the first page."
        },
        "types": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "log",
              "debug",
              "info",
              "error",
              "warn",
              "dir",
              "dirxml",
              "table",
              "trace",
              "clear",
              "startGroup",
              "startGroupCollapsed",
              "endGroup",
              "assert",
              "profile",
              "profileEnd",
              "count",
              "timeEnd",
              "verbose"
            ]
          },
          "description": "Filter messages to only return messages of the specified resource types. When omitted or empty, returns all messages."
        },
        "includePreservedMessages": {
          "type": "boolean",
          "default": false,
          "description": "Set to true to return the preserved messages over the last 3 navigations."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__list_network_requests",
    "description": "List all requests for the currently selected page since the last navigation.",
    "input_schema": {
      "type": "object",
      "properties": {
        "pageSize": {
          "type": "integer",
          "exclusiveMinimum": 0,
          "description": "Maximum number of requests to return. When omitted, returns all requests."
        },
        "pageIdx": {
          "type": "integer",
          "minimum": 0,
          "description": "Page number to return (0-based). When omitted, returns the first page."
        },
        "resourceTypes": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "document",
              "stylesheet",
              "image",
              "media",
              "font",
              "script",
              "texttrack",
              "xhr",
              "fetch",
              "prefetch",
              "eventsource",
              "websocket",
              "manifest",
              "signedexchange",
              "ping",
              "cspviolationreport",
              "preflight",
              "fedcm",
              "other"
            ]
          },
          "description": "Filter requests to only return requests of the specified resource types. When omitted or empty, returns all requests."
        },
        "includePreservedRequests": {
          "type": "boolean",
          "default": false,
          "description": "Set to true to return the preserved requests over the last 3 navigations."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__list_pages",
    "description": "Get a list of pages open in the browser.",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__navigate_page",
    "description": "Navigates the currently selected page to a URL.",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL to navigate the page to"
        },
        "timeout": {
          "type": "integer",
          "description": "Maximum wait time in milliseconds. If set to 0, the default timeout will be used."
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__navigate_page_history",
    "description": "Navigates the currently selected page.",
    "input_schema": {
      "type": "object",
      "properties": {
        "navigate": {
          "type": "string",
          "enum": [
            "back",
            "forward"
          ],
          "description": "Whether to navigate back or navigate forward in the selected pages history"
        },
        "timeout": {
          "type": "integer",
          "description": "Maximum wait time in milliseconds. If set to 0, the default timeout will be used."
        }
      },
      "required": [
        "navigate"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__new_page",
    "description": "Creates a new page",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL to load in a new page."
        },
        "timeout": {
          "type": "integer",
          "description": "Maximum wait time in milliseconds. If set to 0, the default timeout will be used."
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__performance_analyze_insight",
    "description": "Provides more detailed information on a specific Performance Insight that was highlighted in the results of a trace recording.",
    "input_schema": {
      "type": "object",
      "properties": {
        "insightName": {
          "type": "string",
          "description": "The name of the Insight you want more information on. For example: \"DocumentLatency\" or \"LCPBreakdown\""
        }
      },
      "required": [
        "insightName"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__performance_start_trace",
    "description": "Starts a performance trace recording on the selected page. This can be used to look for performance problems and insights to improve the performance of the page. It will also report Core Web Vital (CWV) scores for the page.",
    "input_schema": {
      "type": "object",
      "properties": {
        "reload": {
          "type": "boolean",
          "description": "Determines if, once tracing has started, the page should be automatically reloaded."
        },
        "autoStop": {
          "type": "boolean",
          "description": "Determines if the trace recording should be automatically stopped."
        }
      },
      "required": [
        "reload",
        "autoStop"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__performance_stop_trace",
    "description": "Stops the active performance trace recording on the selected page.",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__resize_page",
    "description": "Resizes the selected page's window so that the page has specified dimension",
    "input_schema": {
      "type": "object",
      "properties": {
        "width": {
          "type": "number",
          "description": "Page width"
        },
        "height": {
          "type": "number",
          "description": "Page height"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__select_page",
    "description": "Select a page as a context for future tool calls.",
    "input_schema": {
      "type": "object",
      "properties": {
        "pageIdx": {
          "type": "number",
          "description": "The index of the page to select. Call list_pages to list pages."
        }
      },
      "required": [
        "pageIdx"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__take_screenshot",
    "description": "Take a screenshot of the page or element.",
    "input_schema": {
      "type": "object",
      "properties": {
        "format": {
          "type": "string",
          "enum": [
            "png",
            "jpeg",
            "webp"
          ],
          "default": "png",
          "description": "Type of format to save the screenshot as. Default is \"png\""
        },
        "quality": {
          "type": "number",
          "minimum": 0,
          "maximum": 100,
          "description": "Compression quality for JPEG and WebP formats (0-100). Higher values mean better quality but larger file sizes. Ignored for PNG format."
        },
        "uid": {
          "type": "string",
          "description": "The uid of an element on the page from the page content snapshot. If omitted takes a pages screenshot."
        },
        "fullPage": {
          "type": "boolean",
          "description": "If set to true takes a screenshot of the full page instead of the currently visible viewport. Incompatible with uid."
        },
        "filePath": {
          "type": "string",
          "description": "The absolute path, or a path relative to the current working directory, to save the screenshot to instead of attaching it to the response."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__take_snapshot",
    "description": "Take a text snapshot of the currently selected page based on the a11y tree. The snapshot lists page elements along with a unique\nidentifier (uid). Always use the latest snapshot. Prefer taking a snapshot over taking a screenshot.",
    "input_schema": {
      "type": "object",
      "properties": {
        "verbose": {
          "type": "boolean",
          "description": "Whether to include all possible information available in the full a11y tree. Default is false."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__upload_file",
    "description": "Upload a file through a provided element.",
    "input_schema": {
      "type": "object",
      "properties": {
        "uid": {
          "type": "string",
          "description": "The uid of the file input element or an element that will open file chooser on the page from the page content snapshot"
        },
        "filePath": {
          "type": "string",
          "description": "The local path of the file to upload"
        }
      },
      "required": [
        "uid",
        "filePath"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__chrome-devtools__wait_for",
    "description": "Wait for the specified text to appear on the selected page.",
    "input_schema": {
      "type": "object",
      "properties": {
        "text": {
          "type": "string",
          "description": "Text to appear on the page"
        },
        "timeout": {
          "type": "integer",
          "description": "Maximum wait time in milliseconds. If set to 0, the default timeout will be used."
        }
      },
      "required": [
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__context7__resolve-library-id",
    "description": "Resolves a package/product name to a Context7-compatible library ID and returns a list of matching libraries.\n\nYou MUST call this function before 'get-library-docs' to obtain a valid Context7-compatible library ID UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.\n\nSelection Process:\n1. Analyze the query to understand what library/package the user is looking for\n2. Return the most relevant match based on:\n- Name similarity to the query (exact matches prioritized)\n- Description relevance to the query's intent\n- Documentation coverage (prioritize libraries with higher Code Snippet counts)\n- Trust score (consider libraries with scores of 7-10 more authoritative)\n\nResponse Format:\n- Return the selected library ID in a clearly marked section\n- Provide a brief explanation for why this library was chosen\n- If multiple good matches exist, acknowledge this but proceed with the most relevant one\n- If no good matches exist, clearly state this and suggest query refinements\n\nFor ambiguous queries, request clarification before proceeding with a best-guess match.",
    "input_schema": {
      "type": "object",
      "properties": {
        "libraryName": {
          "type": "string",
          "description": "Library name to search for and retrieve a Context7-compatible library ID."
        }
      },
      "required": [
        "libraryName"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__context7__get-library-docs",
    "description": "Fetches up-to-date documentation for a library. You must call 'resolve-library-id' first to obtain the exact Context7-compatible library ID required to use this tool, UNLESS the user explicitly provides a library ID in the format '/org/project' or '/org/project/version' in their query.",
    "input_schema": {
      "type": "object",
      "properties": {
        "context7CompatibleLibraryID": {
          "type": "string",
          "description": "Exact Context7-compatible library ID (e.g., '/mongodb/docs', '/vercel/next.js', '/supabase/supabase', '/vercel/next.js/v14.3.0-canary.87') retrieved from 'resolve-library-id' or directly from user query in the format '/org/project' or '/org/project/version'."
        },
        "topic": {
          "type": "string",
          "description": "Topic to focus documentation on (e.g., 'hooks', 'routing')."
        },
        "tokens": {
          "type": "number",
          "description": "Maximum number of tokens of documentation to retrieve (default: 5000). Higher values provide more context but consume more tokens."
        }
      },
      "required": [
        "context7CompatibleLibraryID"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__sequential-thinking__sequentialthinking",
    "description": "A detailed tool for dynamic and reflective problem-solving through thoughts.\nThis tool helps analyze problems through a flexible thinking process that can adapt and evolve.\nEach thought can build on, question, or revise previous insights as understanding deepens.\n\nWhen to use this tool:\n- Breaking down complex problems into steps\n- Planning and design with room for revision\n- Analysis that might need course correction\n- Problems where the full scope might not be clear initially\n- Problems that require a multi-step solution\n- Tasks that need to maintain context over multiple steps\n- Situations where irrelevant information needs to be filtered out\n\nKey features:\n- You can adjust total_thoughts up or down as you progress\n- You can question or revise previous thoughts\n- You can add more thoughts even after reaching what seemed like the end\n- You can express uncertainty and explore alternative approaches\n- Not every thought needs to build linearly - you can branch or backtrack\n- Generates a solution hypothesis\n- Verifies the hypothesis based on the Chain of Thought steps\n- Repeats the process until satisfied\n- Provides a correct answer\n\nParameters explained:\n- thought: Your current thinking step, which can include:\n* Regular analytical steps\n* Revisions of previous thoughts\n* Questions about previous decisions\n* Realizations about needing more analysis\n* Changes in approach\n* Hypothesis generation\n* Hypothesis verification\n- next_thought_needed: True if you need more thinking, even if at what seemed like the end\n- thought_number: Current number in sequence (can go beyond initial total if needed)\n- total_thoughts: Current estimate of thoughts needed (can be adjusted up/down)\n- is_revision: A boolean indicating if this thought revises previous thinking\n- revises_thought: If is_revision is true, which thought number is being reconsidered\n- branch_from_thought: If branching, which thought number is the branching point\n- branch_id: Identifier for the current branch (if any)\n- needs_more_thoughts: If reaching end but realizing more thoughts needed\n\nYou should:\n1. Start with an initial estimate of needed thoughts, but be ready to adjust\n2. Feel free to question or revise previous thoughts\n3. Don't hesitate to add more thoughts if needed, even at the \"end\"\n4. Express uncertainty when present\n5. Mark thoughts that revise previous thinking or branch into new paths\n6. Ignore information that is irrelevant to the current step\n7. Generate a solution hypothesis when appropriate\n8. Verify the hypothesis based on the Chain of Thought steps\n9. Repeat the process until satisfied with the solution\n10. Provide a single, ideally correct answer as the final output\n11. Only set next_thought_needed to false when truly done and a satisfactory answer is reached",
    "input_schema": {
      "type": "object",
      "properties": {
        "thought": {
          "type": "string",
          "description": "Your current thinking step"
        },
        "nextThoughtNeeded": {
          "type": "boolean",
          "description": "Whether another thought step is needed"
        },
        "thoughtNumber": {
          "type": "integer",
          "description": "Current thought number",
          "minimum": 1
        },
        "totalThoughts": {
          "type": "integer",
          "description": "Estimated total thoughts needed",
          "minimum": 1
        },
        "isRevision": {
          "type": "boolean",
          "description": "Whether this revises previous thinking"
        },
        "revisesThought": {
          "type": "integer",
          "description": "Which thought is being reconsidered",
          "minimum": 1
        },
        "branchFromThought": {
          "type": "integer",
          "description": "Branching point thought number",
          "minimum": 1
        },
        "branchId": {
          "type": "string",
          "description": "Branch identifier"
        },
        "needsMoreThoughts": {
          "type": "boolean",
          "description": "If more thoughts are needed"
        }
      },
      "required": [
        "thought",
        "nextThoughtNeeded",
        "thoughtNumber",
        "totalThoughts"
      ]
    }
  },
  {
    "name": "mcp__searxng__searxng_web_search",
    "description": "Performs a web search using the SearXNG API, ideal for general queries, news, articles, and online content. Use this for broad information gathering, recent events, or when you need diverse web sources.",
    "input_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "The search query. This is the main input for the web search"
        },
        "pageno": {
          "type": "number",
          "description": "Search page number (starts at 1)",
          "default": 1
        },
        "time_range": {
          "type": "string",
          "description": "Time range of search (day, month, year)",
          "enum": [
            "day",
            "month",
            "year"
          ]
        },
        "language": {
          "type": "string",
          "description": "Language code for search results (e.g., 'en', 'fr', 'de'). Default is instance-dependent.",
          "default": "all"
        },
        "safesearch": {
          "type": "string",
          "description": "Safe search filter level (0: None, 1: Moderate, 2: Strict)",
          "enum": [
            "0",
            "1",
            "2"
          ],
          "default": "0"
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "mcp__searxng__web_url_read",
    "description": "Read the content from an URL. Use this for further information retrieving to understand the content of each URL.",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "URL"
        },
        "startChar": {
          "type": "number",
          "description": "Starting character position for content extraction (default: 0)",
          "minimum": 0
        },
        "maxLength": {
          "type": "number",
          "description": "Maximum number of characters to return",
          "minimum": 1
        },
        "section": {
          "type": "string",
          "description": "Extract content under a specific heading (searches for heading text)"
        },
        "paragraphRange": {
          "type": "string",
          "description": "Return specific paragraph ranges (e.g., '1-5', '3', '10-')"
        },
        "readHeadings": {
          "type": "boolean",
          "description": "Return only a list of headings instead of full content"
        }
      },
      "required": [
        "url"
      ]
    }
  },
  {
    "name": "ListMcpResourcesTool",
    "description": "\nList available resources from configured MCP servers.\nEach returned resource will include all standard MCP resource fields plus a 'server' field \nindicating which server the resource belongs to.\n\nParameters:\n- server (optional): The name of a specific MCP server to get resources from. If not provided,\n  resources from all servers will be returned.\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "description": "Optional server name to filter resources by"
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "ReadMcpResourceTool",
    "description": "\nReads a specific resource from an MCP server, identified by server name and resource URI.\n\nParameters:\n- server (required): The name of the MCP server from which to read the resource\n- uri (required): The URI of the resource to read\n",
    "input_schema": {
      "type": "object",
      "properties": {
        "server": {
          "type": "string",
          "description": "The MCP server name"
        },
        "uri": {
          "type": "string",
          "description": "The resource URI to read"
        }
      },
      "required": [
        "server",
        "uri"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_close",
    "description": "Close the page",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_resize",
    "description": "Resize the browser window",
    "input_schema": {
      "type": "object",
      "properties": {
        "width": {
          "type": "number",
          "description": "Width of the browser window"
        },
        "height": {
          "type": "number",
          "description": "Height of the browser window"
        }
      },
      "required": [
        "width",
        "height"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_console_messages",
    "description": "Returns all console messages",
    "input_schema": {
      "type": "object",
      "properties": {
        "onlyErrors": {
          "type": "boolean",
          "description": "Only return error messages"
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_handle_dialog",
    "description": "Handle a dialog",
    "input_schema": {
      "type": "object",
      "properties": {
        "accept": {
          "type": "boolean",
          "description": "Whether to accept the dialog."
        },
        "promptText": {
          "type": "string",
          "description": "The text of the prompt in case of a prompt dialog."
        }
      },
      "required": [
        "accept"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_evaluate",
    "description": "Evaluate JavaScript expression on page or element",
    "input_schema": {
      "type": "object",
      "properties": {
        "function": {
          "type": "string",
          "description": "() => { /* code */ } or (element) => { /* code */ } when element is provided"
        },
        "element": {
          "type": "string",
          "description": "Human-readable element description used to obtain permission to interact with the element"
        },
        "ref": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot"
        }
      },
      "required": [
        "function"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_file_upload",
    "description": "Upload one or multiple files",
    "input_schema": {
      "type": "object",
      "properties": {
        "paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The absolute paths to the files to upload. Can be single file or multiple files. If omitted, file chooser is cancelled."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_fill_form",
    "description": "Fill multiple form fields",
    "input_schema": {
      "type": "object",
      "properties": {
        "fields": {
          "type": "array",
          "items": {
            "type": "object",
            "properties": {
              "name": {
                "type": "string",
                "description": "Human-readable field name"
              },
              "type": {
                "type": "string",
                "enum": [
                  "textbox",
                  "checkbox",
                  "radio",
                  "combobox",
                  "slider"
                ],
                "description": "Type of the field"
              },
              "ref": {
                "type": "string",
                "description": "Exact target field reference from the page snapshot"
              },
              "value": {
                "type": "string",
                "description": "Value to fill in the field. If the field is a checkbox, the value should be `true` or `false`. If the field is a combobox, the value should be the text of the option."
              }
            },
            "required": [
              "name",
              "type",
              "ref",
              "value"
            ],
            "additionalProperties": false
          },
          "description": "Fields to fill in"
        }
      },
      "required": [
        "fields"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_install",
    "description": "Install the browser specified in the config. Call this if you get an error about the browser not being installed.",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_press_key",
    "description": "Press a key on the keyboard",
    "input_schema": {
      "type": "object",
      "properties": {
        "key": {
          "type": "string",
          "description": "Name of the key to press or a character to generate, such as `ArrowLeft` or `a`"
        }
      },
      "required": [
        "key"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_type",
    "description": "Type text into editable element",
    "input_schema": {
      "type": "object",
      "properties": {
        "element": {
          "type": "string",
          "description": "Human-readable element description used to obtain permission to interact with the element"
        },
        "ref": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot"
        },
        "text": {
          "type": "string",
          "description": "Text to type into the element"
        },
        "submit": {
          "type": "boolean",
          "description": "Whether to submit entered text (press Enter after)"
        },
        "slowly": {
          "type": "boolean",
          "description": "Whether to type one character at a time. Useful for triggering key handlers in the page. By default entire text is filled in at once."
        }
      },
      "required": [
        "element",
        "ref",
        "text"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_navigate",
    "description": "Navigate to a URL",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The URL to navigate to"
        }
      },
      "required": [
        "url"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_navigate_back",
    "description": "Go back to the previous page",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_network_requests",
    "description": "Returns all network requests since loading the page",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_take_screenshot",
    "description": "Take a screenshot of the current page. You can't perform actions based on the screenshot, use browser_snapshot for actions.",
    "input_schema": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": [
            "png",
            "jpeg"
          ],
          "default": "png",
          "description": "Image format for the screenshot. Default is png."
        },
        "filename": {
          "type": "string",
          "description": "File name to save the screenshot to. Defaults to `page-{timestamp}.{png|jpeg}` if not specified. Prefer relative file names to stay within the output directory."
        },
        "element": {
          "type": "string",
          "description": "Human-readable element description used to obtain permission to screenshot the element. If not provided, the screenshot will be taken of viewport. If element is provided, ref must be provided too."
        },
        "ref": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot. If not provided, the screenshot will be taken of viewport. If ref is provided, element must be provided too."
        },
        "fullPage": {
          "type": "boolean",
          "description": "When true, takes a screenshot of the full scrollable page, instead of the currently visible viewport. Cannot be used with element screenshots."
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_snapshot",
    "description": "Capture accessibility snapshot of the current page, this is better than screenshot",
    "input_schema": {
      "type": "object",
      "properties": {},
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_click",
    "description": "Perform click on a web page",
    "input_schema": {
      "type": "object",
      "properties": {
        "element": {
          "type": "string",
          "description": "Human-readable element description used to obtain permission to interact with the element"
        },
        "ref": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot"
        },
        "doubleClick": {
          "type": "boolean",
          "description": "Whether to perform a double click instead of a single click"
        },
        "button": {
          "type": "string",
          "enum": [
            "left",
            "right",
            "middle"
          ],
          "description": "Button to click, defaults to left"
        },
        "modifiers": {
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "Alt",
              "Control",
              "ControlOrMeta",
              "Meta",
              "Shift"
            ]
          },
          "description": "Modifier keys to press"
        }
      },
      "required": [
        "element",
        "ref"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_drag",
    "description": "Perform drag and drop between two elements",
    "input_schema": {
      "type": "object",
      "properties": {
        "startElement": {
          "type": "string",
          "description": "Human-readable source element description used to obtain the permission to interact with the element"
        },
        "startRef": {
          "type": "string",
          "description": "Exact source element reference from the page snapshot"
        },
        "endElement": {
          "type": "string",
          "description": "Human-readable target element description used to obtain the permission to interact with the element"
        },
        "endRef": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot"
        }
      },
      "required": [
        "startElement",
        "startRef",
        "endElement",
        "endRef"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_hover",
    "description": "Hover over element on page",
    "input_schema": {
      "type": "object",
      "properties": {
        "element": {
          "type": "string",
          "description": "Human-readable element description used to obtain permission to interact with the element"
        },
        "ref": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot"
        }
      },
      "required": [
        "element",
        "ref"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_select_option",
    "description": "Select an option in a dropdown",
    "input_schema": {
      "type": "object",
      "properties": {
        "element": {
          "type": "string",
          "description": "Human-readable element description used to obtain permission to interact with the element"
        },
        "ref": {
          "type": "string",
          "description": "Exact target element reference from the page snapshot"
        },
        "values": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Array of values to select in the dropdown. This can be a single value or multiple values."
        }
      },
      "required": [
        "element",
        "ref",
        "values"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_tabs",
    "description": "List, create, close, or select a browser tab.",
    "input_schema": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": [
            "list",
            "new",
            "close",
            "select"
          ],
          "description": "Operation to perform"
        },
        "index": {
          "type": "number",
          "description": "Tab index, used for close/select. If omitted for close, current tab is closed."
        }
      },
      "required": [
        "action"
      ],
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__playwright__browser_wait_for",
    "description": "Wait for text to appear or disappear or a specified time to pass",
    "input_schema": {
      "type": "object",
      "properties": {
        "time": {
          "type": "number",
          "description": "The time to wait in seconds"
        },
        "text": {
          "type": "string",
          "description": "The text to wait for"
        },
        "textGone": {
          "type": "string",
          "description": "The text to wait for to disappear"
        }
      },
      "additionalProperties": false,
      "$schema": "http://json-schema.org/draft-07/schema#"
    }
  },
  {
    "name": "mcp__tavily-mcp__tavily-search",
    "description": "A powerful web search tool that provides comprehensive, real-time results using Tavily's AI search engine. Returns relevant web content with customizable parameters for result count, content type, and domain filtering. Ideal for gathering current information, news, and detailed web content analysis.",
    "input_schema": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "description": "Search query"
        },
        "search_depth": {
          "type": "string",
          "enum": [
            "basic",
            "advanced"
          ],
          "description": "The depth of the search. It can be 'basic' or 'advanced'",
          "default": "basic"
        },
        "topic": {
          "type": "string",
          "enum": [
            "general",
            "news"
          ],
          "description": "The category of the search. This will determine which of our agents will be used for the search",
          "default": "general"
        },
        "days": {
          "type": "number",
          "description": "The number of days back from the current date to include in the search results. This specifies the time frame of data to be retrieved. Please note that this feature is only available when using the 'news' search topic",
          "default": 3
        },
        "time_range": {
          "type": "string",
          "description": "The time range back from the current date to include in the search results. This feature is available for both 'general' and 'news' search topics",
          "enum": [
            "day",
            "week",
            "month",
            "year",
            "d",
            "w",
            "m",
            "y"
          ]
        },
        "start_date": {
          "type": "string",
          "description": "Will return all results after the specified start date. Required to be written in the format YYYY-MM-DD.",
          "default": ""
        },
        "end_date": {
          "type": "string",
          "description": "Will return all results before the specified end date. Required to be written in the format YYYY-MM-DD",
          "default": ""
        },
        "max_results": {
          "type": "number",
          "description": "The maximum number of search results to return",
          "default": 10,
          "minimum": 5,
          "maximum": 20
        },
        "include_images": {
          "type": "boolean",
          "description": "Include a list of query-related images in the response",
          "default": false
        },
        "include_image_descriptions": {
          "type": "boolean",
          "description": "Include a list of query-related images and their descriptions in the response",
          "default": false
        },
        "include_raw_content": {
          "type": "boolean",
          "description": "Include the cleaned and parsed HTML content of each search result",
          "default": false
        },
        "include_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of domains to specifically include in the search results, if the user asks to search on specific sites set this to the domain of the site",
          "default": []
        },
        "exclude_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of domains to specifically exclude, if the user asks to exclude a domain set this to the domain of the site",
          "default": []
        },
        "country": {
          "type": "string",
          "enum": [
            "afghanistan",
            "albania",
            "algeria",
            "andorra",
            "angola",
            "argentina",
            "armenia",
            "australia",
            "austria",
            "azerbaijan",
            "bahamas",
            "bahrain",
            "bangladesh",
            "barbados",
            "belarus",
            "belgium",
            "belize",
            "benin",
            "bhutan",
            "bolivia",
            "bosnia and herzegovina",
            "botswana",
            "brazil",
            "brunei",
            "bulgaria",
            "burkina faso",
            "burundi",
            "cambodia",
            "cameroon",
            "canada",
            "cape verde",
            "central african republic",
            "chad",
            "chile",
            "china",
            "colombia",
            "comoros",
            "congo",
            "costa rica",
            "croatia",
            "cuba",
            "cyprus",
            "czech republic",
            "denmark",
            "djibouti",
            "dominican republic",
            "ecuador",
            "egypt",
            "el salvador",
            "equatorial guinea",
            "eritrea",
            "estonia",
            "ethiopia",
            "fiji",
            "finland",
            "france",
            "gabon",
            "gambia",
            "georgia",
            "germany",
            "ghana",
            "greece",
            "guatemala",
            "guinea",
            "haiti",
            "honduras",
            "hungary",
            "iceland",
            "india",
            "indonesia",
            "iran",
            "iraq",
            "ireland",
            "israel",
            "italy",
            "jamaica",
            "japan",
            "jordan",
            "kazakhstan",
            "kenya",
            "kuwait",
            "kyrgyzstan",
            "latvia",
            "lebanon",
            "lesotho",
            "liberia",
            "libya",
            "liechtenstein",
            "lithuania",
            "luxembourg",
            "madagascar",
            "malawi",
            "malaysia",
            "maldives",
            "mali",
            "malta",
            "mauritania",
            "mauritius",
            "mexico",
            "moldova",
            "monaco",
            "mongolia",
            "montenegro",
            "morocco",
            "mozambique",
            "myanmar",
            "namibia",
            "nepal",
            "netherlands",
            "new zealand",
            "nicaragua",
            "niger",
            "nigeria",
            "north korea",
            "north macedonia",
            "norway",
            "oman",
            "pakistan",
            "panama",
            "papua new guinea",
            "paraguay",
            "peru",
            "philippines",
            "poland",
            "portugal",
            "qatar",
            "romania",
            "russia",
            "rwanda",
            "saudi arabia",
            "senegal",
            "serbia",
            "singapore",
            "slovakia",
            "slovenia",
            "somalia",
            "south africa",
            "south korea",
            "south sudan",
            "spain",
            "sri lanka",
            "sudan",
            "sweden",
            "switzerland",
            "syria",
            "taiwan",
            "tajikistan",
            "tanzania",
            "thailand",
            "togo",
            "trinidad and tobago",
            "tunisia",
            "turkey",
            "turkmenistan",
            "uganda",
            "ukraine",
            "united arab emirates",
            "united kingdom",
            "united states",
            "uruguay",
            "uzbekistan",
            "venezuela",
            "vietnam",
            "yemen",
            "zambia",
            "zimbabwe"
          ],
          "description": "Boost search results from a specific country. This will prioritize content from the selected country in the search results. Available only if topic is general. Country names MUST be written in lowercase, plain English, with spaces and no underscores.",
          "default": ""
        },
        "include_favicon": {
          "type": "boolean",
          "description": "Whether to include the favicon URL for each result",
          "default": false
        }
      },
      "required": [
        "query"
      ]
    }
  },
  {
    "name": "mcp__tavily-mcp__tavily-extract",
    "description": "A powerful web content extraction tool that retrieves and processes raw content from specified URLs, ideal for data collection, content analysis, and research tasks.",
    "input_schema": {
      "type": "object",
      "properties": {
        "urls": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of URLs to extract content from"
        },
        "extract_depth": {
          "type": "string",
          "enum": [
            "basic",
            "advanced"
          ],
          "description": "Depth of extraction - 'basic' or 'advanced', if usrls are linkedin use 'advanced' or if explicitly told to use advanced",
          "default": "basic"
        },
        "include_images": {
          "type": "boolean",
          "description": "Include a list of images extracted from the urls in the response",
          "default": false
        },
        "format": {
          "type": "string",
          "enum": [
            "markdown",
            "text"
          ],
          "description": "The format of the extracted web page content. markdown returns content in markdown format. text returns plain text and may increase latency.",
          "default": "markdown"
        },
        "include_favicon": {
          "type": "boolean",
          "description": "Whether to include the favicon URL for each result",
          "default": false
        }
      },
      "required": [
        "urls"
      ]
    }
  },
  {
    "name": "mcp__tavily-mcp__tavily-crawl",
    "description": "A powerful web crawler that initiates a structured web crawl starting from a specified base URL. The crawler expands from that point like a graph, following internal links across pages. You can control how deep and wide it goes, and guide it to focus on specific sections of the site.",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The root URL to begin the crawl"
        },
        "max_depth": {
          "type": "integer",
          "description": "Max depth of the crawl. Defines how far from the base URL the crawler can explore.",
          "default": 1,
          "minimum": 1
        },
        "max_breadth": {
          "type": "integer",
          "description": "Max number of links to follow per level of the tree (i.e., per page)",
          "default": 20,
          "minimum": 1
        },
        "limit": {
          "type": "integer",
          "description": "Total number of links the crawler will process before stopping",
          "default": 50,
          "minimum": 1
        },
        "instructions": {
          "type": "string",
          "description": "Natural language instructions for the crawler. Instructions specify which types of pages the crawler should return."
        },
        "select_paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to select only URLs with specific path patterns (e.g., /docs/.*, /api/v1.*)",
          "default": []
        },
        "select_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to restrict crawling to specific domains or subdomains (e.g., ^docs\\.example\\.com$)",
          "default": []
        },
        "allow_external": {
          "type": "boolean",
          "description": "Whether to return external links in the final response",
          "default": true
        },
        "extract_depth": {
          "type": "string",
          "enum": [
            "basic",
            "advanced"
          ],
          "description": "Advanced extraction retrieves more data, including tables and embedded content, with higher success but may increase latency",
          "default": "basic"
        },
        "format": {
          "type": "string",
          "enum": [
            "markdown",
            "text"
          ],
          "description": "The format of the extracted web page content. markdown returns content in markdown format. text returns plain text and may increase latency.",
          "default": "markdown"
        },
        "include_favicon": {
          "type": "boolean",
          "description": "Whether to include the favicon URL for each result",
          "default": false
        }
      },
      "required": [
        "url"
      ]
    }
  },
  {
    "name": "mcp__tavily-mcp__tavily-map",
    "description": "A powerful web mapping tool that creates a structured map of website URLs, allowing you to discover and analyze site structure, content organization, and navigation paths. Perfect for site audits, content discovery, and understanding website architecture.",
    "input_schema": {
      "type": "object",
      "properties": {
        "url": {
          "type": "string",
          "description": "The root URL to begin the mapping"
        },
        "max_depth": {
          "type": "integer",
          "description": "Max depth of the mapping. Defines how far from the base URL the crawler can explore",
          "default": 1,
          "minimum": 1
        },
        "max_breadth": {
          "type": "integer",
          "description": "Max number of links to follow per level of the tree (i.e., per page)",
          "default": 20,
          "minimum": 1
        },
        "limit": {
          "type": "integer",
          "description": "Total number of links the crawler will process before stopping",
          "default": 50,
          "minimum": 1
        },
        "instructions": {
          "type": "string",
          "description": "Natural language instructions for the crawler"
        },
        "select_paths": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to select only URLs with specific path patterns (e.g., /docs/.*, /api/v1.*)",
          "default": []
        },
        "select_domains": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Regex patterns to restrict crawling to specific domains or subdomains (e.g., ^docs\\.example\\.com$)",
          "default": []
        },
        "allow_external": {
          "type": "boolean",
          "description": "Whether to return external links in the final response",
          "default": true
        }
      },
      "required": [
        "url"
      ]
    }
  }
]
